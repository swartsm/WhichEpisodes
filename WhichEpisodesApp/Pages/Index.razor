@using System.Web
@page "/"

@inject IHttpClientFactory _clientFactory
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration 
@inject KeyVaultModel keyvaultmodel


<PageTitle>Which Episodes</PageTitle>
<head>
    @*google font monterrat*@
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Montserrat">
   
</head>
<body>
    <div class="wrapper">
    <h1>Enter a TV Actor's name</h1>
    <div class="actor-input">
        <search type="text" id="textEntry" name="textEntry">Search for an actor:</search>
        <input type="text" @bind="enteredActorName" />
        <button type="submit" class="btn btn-warning" @onclick="OnInitializedAsync">Submit</button>
    </div>
    <div class="main-space">

    @if (string.IsNullOrWhiteSpace(errorString) == false)
    {
    <div class="h2">@errorString</div>
    }
    else if (actor is null)
    {
        <div></div>
    }
    else
    {
        if(!actorIdList.Any())
        {
            <h3>No Results. Search Again.</h3>
        }
        else
        {
            if(!actorShowIdList.Any()) 
            {
                <h3>No results. Enter actor's full name.</h3>
            }
            else 
            {
                @foreach (var x in actorIdList)
                {
                    <h3>actor @x</h3>
                }
                @foreach (var y in actorShowIdList)
                {
                    <h4>show id @y</h4>
                }
        
            
                <h3>Select a television show to see which episodes @actorNameFromAPI apepared in</h3>
                <div class="container">
                    <div class="row">
                        @foreach (var x in tvcredits.creditsCast)
                        {
                            <div class="col-sm-4">
                                @*<div class="card-columns-fluid">*@
                                <div class="card">
                                    @*<div class="card-body">*@
                                    @*note this formatting to concatenate a string to get the poster path for each show*@
                                    <button class="btn btn-light" @onclick="@(e => chooseTVShow(@actorNameFromAPI, @x.showId))"> <img src="@String.Format("https://image.tmdb.org/t/p/w300{0}", x.posterPath)"></button>
                                    @*</div>*@
                                </div>
                                @*</div>*@
                            </div>

                        }
                    </div> 
                </div>
            }
        }
    }
</div>
</div>
<footer>
    <img src="Images/blue_long_2.svg" />
</footer>

</body>

@code {

    ActorModel actor;
    PersonTVCreditsModel tvcredits;


    string? errorString;


    public string? enteredActorName;
    public string? actorNameFromAPI;
    public List<int> actorIdList = new List<int>();
    public List<string> actorNameList = new List<string>();

    public List<int> actorShowIdList = new List<int>();

    public string? testrequest;


    protected override async Task OnInitializedAsync()
    {
        //for local use of user-secrets
        //var tmdbApiKey = Configuration["API_key"];

        var keyvaultvalue = KeyVaultModel.keyVaultValue;

        if (enteredActorName != null)
        {
            //@*encode actor name*@
            //encodeActorName;
            var encodedName = Uri.EscapeDataString(enteredActorName);

            //http request for actor info
            //var request = new HttpRequestMessage(HttpMethod.Get,
            //"http://api.tmdb.org/3/search/person?api_key=c8894f1bb561c45b2d987daeca10672d&query=" + encodedName);
            var request = new HttpRequestMessage(HttpMethod.Get,
                "http://api.tmdb.org/3/search/person?api_key=" + keyvaultvalue + "&query=" + encodedName);

            //create HTTP client    
            var client = _clientFactory.CreateClient();

            HttpResponseMessage response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                actor = await response.Content.ReadFromJsonAsync<ActorModel>();
                errorString = null;
            }
            else
            {
                errorString = $"There was an errror: {response.ReasonPhrase}";
            }
            
            //save actors with searched name and their Ids to lists
            try
            {
                actorIdList.Clear();
                actorNameList.Clear();
                foreach (var w in actor.results)
                {
                    actorIdList.Add(w.id);
                    actorNameList.Add(w.name);
                }
            }
            catch (Exception e)
            {
                errorString = $"error: {e}";
            }
            
            //the top result is the most popular one. So the first name/id is the one we will go with
            //we are choosing the "best" result for the user
            if(actorNameList.Any())
            {   
                actorNameFromAPI = actorNameList[0];
            

            //search the actor's TV credits
            var request2 = new HttpRequestMessage(HttpMethod.Get,
                "https://api.themoviedb.org/3/person/" + actorIdList[0] + "/tv_credits?api_key="+ keyvaultvalue + "&language=en-US");

            //var client2 = _clientFactory.CreateClient();

            HttpResponseMessage response2 = await client.SendAsync(request2);

            if (response2.IsSuccessStatusCode)
            {
                tvcredits = await response2.Content.ReadFromJsonAsync<PersonTVCreditsModel>();
                errorString = null;

                foreach (var x in tvcredits.creditsCast)
                {
                    actorShowIdList.Add(x.showId);
                }
            }
            else
            {
                errorString = $"There was an errror: {response2.ReasonPhrase}";
            }

            
            }
           

        }
    }


    //this method is called when the TV show image button is clicked and it brings the
    //user to a new page that will show all the episodes the actor appears in
    void chooseTVShow(string actorName, int showId)
    {
        NavigationManager.NavigateTo($"/Episodes/{actorName}/{showId}");
    }


}


